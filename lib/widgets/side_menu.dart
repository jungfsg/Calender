// lib/widgets/side_menu.dart (ÏµúÏ¢Ö ÏàòÏ†ïÎ≥∏ - TTS Í¥ÄÎ†® UI Ï†úÍ±∞)
import 'package:flutter/material.dart';
import '../utils/font_utils.dart';
import '../models/event.dart';

class CalendarSideMenu extends StatelessWidget {
  final VoidCallback onWeatherForecastTap;
  final VoidCallback onGoogleCalendarDownload;
  final VoidCallback onGoogleCalendarUpload;
  final VoidCallback onLogoutTap;
  final VoidCallback onBriefingSettingsTap; // üÜï Î∏åÎ¶¨Ìïë ÏÑ§Ï†ï ÏΩúÎ∞± Ï∂îÍ∞Ä
  final bool isGoogleCalendarConnected;
  final List<Event> events; // üÜï Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï∂îÍ∞Ä
  final DateTime currentMonth; // üÜï ÌòÑÏû¨ Ïõî Ï†ïÎ≥¥ Ï∂îÍ∞Ä

  // --- ‚òÖ‚òÖ‚òÖ ÏàòÏ†ï: TTS Í¥ÄÎ†® ÏÜçÏÑ± Î™®Îëê Ï†úÍ±∞ ‚òÖ‚òÖ‚òÖ ---
  const CalendarSideMenu({
    super.key,
    required this.onWeatherForecastTap,
    required this.onGoogleCalendarDownload,
    required this.onGoogleCalendarUpload,
    required this.onLogoutTap,
    required this.onBriefingSettingsTap, // üÜï Î∏åÎ¶¨Ìïë ÏÑ§Ï†ï ÏΩúÎ∞± Ï∂îÍ∞Ä
    this.isGoogleCalendarConnected = false,
    required this.events, // üÜï Ïù¥Î≤§Ìä∏ Î™©Î°ù ÌïÑÏàòÎ°ú Î∞õÍ∏∞
    required this.currentMonth, // üÜï ÌòÑÏû¨ Ïõî Ï†ïÎ≥¥ ÌïÑÏàòÎ°ú Î∞õÍ∏∞
  });

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: Theme.of(context).copyWith(
        drawerTheme: const DrawerThemeData(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.zero),
        ),
      ),
      child: Drawer(
        width: MediaQuery.of(context).size.width * 0.75,
        backgroundColor: const Color.fromARGB(255, 255, 255, 255),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.fromLTRB(16, 40, 16, 16),
              color: Colors.black,
              width: double.infinity,
              child: Text(
                'Ï∫òÎ¶∞Îçî Î©îÎâ¥',
                style: getTextStyle(fontSize: 14, color: Colors.white),
              ),
            ),
            const SizedBox(height: 20),
            ListTile(
              leading: const Icon(Icons.wb_sunny, color: Colors.orange),
              title: Text(
                '5ÏùºÍ∞Ñ ÎÇ†Ïî® ÏòàÎ≥¥',
                style: getTextStyle(fontSize: 12, color: Colors.black),
              ),
              onTap: () {
                Navigator.pop(context);
                onWeatherForecastTap();
              },
            ),
            ListTile(
              leading: const Icon(
                Icons.notifications_active,
                color: Colors.blue,
              ),
              title: Text(
                'Î∏åÎ¶¨Ìïë ÏÑ§Ï†ï',
                style: getTextStyle(fontSize: 12, color: Colors.black),
              ),
              subtitle: Text(
                'ÏùºÏùº ÏùºÏ†ï Î∏åÎ¶¨Ìïë ÏïåÎ¶º ÏÑ§Ï†ï',
                style: getTextStyle(fontSize: 10, color: Colors.grey),
              ),
              onTap: () {
                Navigator.pop(context);
                onBriefingSettingsTap();
              },
            ),

            // --- ‚òÖ‚òÖ‚òÖ ÏàòÏ†ï: TTS ÏÑ§Ï†ï Ïä§ÏúÑÏπòÏôÄ Íµ¨Î∂ÑÏÑ†(Divider) ÏôÑÏ†Ñ Ï†úÍ±∞ ‚òÖ‚òÖ‚òÖ ---
            // const Divider(),
            // SwitchListTile(...) -> Ïù¥ Î∂ÄÎ∂ÑÏù¥ ÏôÑÏ†ÑÌûà ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.
            const Spacer(),
            const Divider(),
            ListTile(
              leading: const Icon(Icons.category, color: Colors.blue),
              title: Text(
                'Ïπ¥ÌÖåÍ≥†Î¶¨',
                style: getTextStyle(fontSize: 12, color: Colors.black),
              ),
            ),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 10),
              child: GridView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 4,
                  crossAxisSpacing: 8,
                  mainAxisSpacing: 8,
                  childAspectRatio: 1,
                ),
                itemCount: 11,
                itemBuilder: (context, index) {
                  final colors = [
                    const Color(0xFF9AA0F5),
                    const Color(0xFF33B679),
                    const Color(0xFF8E24AA),
                    const Color(0xFFE67C73),
                    const Color(0xFFF6BF26),
                    const Color(0xFFFF8A65),
                    const Color(0xFF039BE5),
                    const Color(0xFF616161),
                    const Color(0xFF3F51B5),
                    const Color(0xFF0B8043),
                    const Color(0xFFD50000),
                  ];

                  final categories = [
                    'ÏóÖÎ¨¥',
                    'ÏßëÏïàÏùº',
                    'Í∏∞ÎÖêÏùº',
                    'ÌïôÍµê',
                    'Ïö¥Îèô',
                    'Í≥µÎ∂Ä',
                    'Ïó¨Ìñâ',
                    'Í∏∞ÌÉÄ',
                    'ÏπúÍµ¨',
                    'Í∞ÄÏ°±',
                    'Î≥ëÏõê',
                  ];

                  return GestureDetector(
                    onTap: () {
                      Navigator.pop(context);
                      _showCategoryEvents(context, categories[index], colors[index]);
                    },
                    child: Container(
                      decoration: BoxDecoration(
                        color: colors[index],
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(
                          color: Colors.grey.shade300,
                          width: 0.5,
                        ),
                      ),
                      child: Center(
                        child: Text(
                          categories[index],
                          style: getTextStyle(fontSize: 10, color: Colors.white),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
            const Divider(
              color: Color.fromARGB(255, 230, 103, 94),
              thickness: 1,
              indent: 16,
              endIndent: 16,
            ),
            ListTile(
              leading: const Icon(Icons.logout, color: Colors.red),
              title: Text(
                'Î°úÍ∑∏ÏïÑÏõÉ',
                style: getTextStyle(fontSize: 12, color: Colors.red),
              ),
              subtitle: Text(
                'Google Í≥ÑÏ†ïÏóêÏÑú Î°úÍ∑∏ÏïÑÏõÉ',
                style: getTextStyle(fontSize: 10, color: Colors.grey),
              ),
              onTap: () {
                Navigator.pop(context);
                _showLogoutConfirmDialog(context);
              },
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  // üÜï Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏùºÏ†ï Î™©Î°ùÏùÑ Î≥¥Ïó¨Ï£ºÎäî ÌåùÏóÖ
  void _showCategoryEvents(BuildContext context, String category, Color categoryColor) {
    // ÌòÑÏû¨ ÏõîÏùò ÏãúÏûëÏùºÍ≥º ÎßàÏßÄÎßâÏùº Í≥ÑÏÇ∞
    final firstDayOfMonth = DateTime(currentMonth.year, currentMonth.month, 1);
    final lastDayOfMonth = DateTime(currentMonth.year, currentMonth.month + 1, 0);

    // Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò ÎãπÏõî ÏùºÏ†ï ÌïÑÌÑ∞ÎßÅ
    final filteredEvents = events.where((event) {
      // Ïπ¥ÌÖåÍ≥†Î¶¨ Îß§Ïπ≠ (ÏßÅÏ†ë Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÎìúÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ colorId Í∏∞Î∞òÏúºÎ°ú Ï∂îÏ†ï)
      bool isMatchingCategory = false;
      
      if (event.category != null && event.category == category) {
        isMatchingCategory = true;
      } else {
        // colorId Í∏∞Î∞òÏúºÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÏ†ï
        final colorIdToCategory = {
          '1': 'ÏóÖÎ¨¥',     // ÎùºÎ≤§Îçî
          '2': 'ÏßëÏïàÏùº',   // ÏÑ∏Ïù¥ÏßÄ
          '3': 'Í∏∞ÎÖêÏùº',   // Ìè¨ÎèÑ
          '4': 'ÌïôÍµê',     // ÌîåÎùºÎ∞çÍ≥†
          '5': 'Ïö¥Îèô',     // Î∞îÎÇòÎÇò
          '6': 'Í≥µÎ∂Ä',     // Í∑§
          '7': 'Ïó¨Ìñâ',     // Í≥µÏûëÏÉà
          '8': 'Í∏∞ÌÉÄ',     // Í∑∏ÎûòÌååÏù¥Ìä∏
          '9': 'ÏπúÍµ¨',     // Î∏îÎ£®Î≤†Î¶¨
          '10': 'Í∞ÄÏ°±',    // Î∞îÏßà
          '11': 'Î≥ëÏõê',    // ÌÜ†ÎßàÌÜ†
        };
        
        if (event.colorId != null && colorIdToCategory[event.colorId] == category) {
          isMatchingCategory = true;
        }
      }

      // ÎãπÏõî Ïù¥Î≤§Ìä∏ Ïó¨Î∂Ä ÌôïÏù∏
      bool isCurrentMonth = false;
      if (event.isMultiDay) {
        // Î©ÄÌã∞Îç∞Ïù¥ Ïù¥Î≤§Ìä∏Ïùò Í≤ΩÏö∞ ÏãúÏûëÏùº ÎòêÎäî Ï¢ÖÎ£åÏùºÏù¥ ÌòÑÏû¨ ÏõîÏóê Ìè¨Ìï®ÎêòÍ±∞ÎÇò, ÌòÑÏû¨ ÏõîÏù¥ Ïù¥Î≤§Ìä∏ Í∏∞Í∞ÑÏóê Ìè¨Ìï®ÎêòÎäîÏßÄ ÌôïÏù∏
        final startDate = event.startDate ?? event.date;
        final endDate = event.endDate ?? event.date;
        
        isCurrentMonth = (startDate.year == currentMonth.year && startDate.month == currentMonth.month) ||
                        (endDate.year == currentMonth.year && endDate.month == currentMonth.month) ||
                        (startDate.isBefore(firstDayOfMonth) && endDate.isAfter(lastDayOfMonth));
      } else {
        // Îã®ÏùºÎÇ†Ïßú Ïù¥Î≤§Ìä∏Ïùò Í≤ΩÏö∞
        isCurrentMonth = event.date.year == currentMonth.year && event.date.month == currentMonth.month;
      }

      return isMatchingCategory && isCurrentMonth;
    }).toList();

    // ÎÇ†ÏßúÏàúÏúºÎ°ú Ï†ïÎ†¨
    filteredEvents.sort((a, b) => a.date.compareTo(b.date));

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Container(
                width: 16,
                height: 16,
                decoration: BoxDecoration(
                  color: categoryColor,
                  borderRadius: BorderRadius.circular(4),
                ),
              ),
              const SizedBox(width: 8),
              Text(
                '$category ÏùºÏ†ï',
                style: getTextStyle(fontSize: 16, color: Colors.black),
              ),
            ],
          ),
          content: SizedBox(
            width: double.maxFinite,
            height: filteredEvents.isEmpty ? 100 : 400,
            child: filteredEvents.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          Icons.event_busy,
                          size: 48,
                          color: Colors.grey[400],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '${currentMonth.month}ÏõîÏóê $category ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.',
                          style: getTextStyle(fontSize: 12, color: Colors.grey),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  )
                : ListView.builder(
                    shrinkWrap: true,
                    itemCount: filteredEvents.length,
                    itemBuilder: (context, index) {
                      final event = filteredEvents[index];
                      return Card(
                        margin: const EdgeInsets.only(bottom: 8),
                        child: ListTile(
                          leading: Container(
                            width: 4,
                            height: double.infinity,
                            color: event.getDisplayColor(),
                          ),
                          title: Text(
                            event.title,
                            style: getTextStyle(fontSize: 12, color: Colors.black),
                          ),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              if (event.isMultiDay)
                                Text(
                                  '${_formatDate(event.startDate ?? event.date)} ~ ${_formatDate(event.endDate ?? event.date)}',
                                  style: getTextStyle(fontSize: 10, color: Colors.grey),
                                )
                              else
                                Text(
                                  '${_formatDate(event.date)}${event.time.isNotEmpty ? ' ${event.time}' : ''}',
                                  style: getTextStyle(fontSize: 10, color: Colors.grey),
                                ),
                              if (event.description.isNotEmpty)
                                Text(
                                  event.description,
                                  style: getTextStyle(fontSize: 10, color: Colors.grey[600]),
                                  maxLines: 2,
                                  overflow: TextOverflow.ellipsis,
                                ),
                            ],
                          ),
                          isThreeLine: event.description.isNotEmpty,
                        ),
                      );
                    },
                  ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text(
                'Îã´Í∏∞',
                style: getTextStyle(fontSize: 12, color: Colors.blue),
              ),
            ),
          ],
        );
      },
    );
  }

  // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ Ìó¨Ìçº Î©îÏÑúÎìú
  String _formatDate(DateTime date) {
    return '${date.month}/${date.day}';
  }

  void _showLogoutConfirmDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            'Î°úÍ∑∏ÏïÑÏõÉ',
            style: getTextStyle(fontSize: 16, color: Colors.black),
          ),
          content: Text(
            'Google Í≥ÑÏ†ïÏóêÏÑú Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÎ°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ëÎãàÎã§.',
            style: getTextStyle(fontSize: 12, color: Colors.black),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text(
                'Ï∑®ÏÜå',
                style: getTextStyle(fontSize: 12, color: Colors.grey),
              ),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                onLogoutTap();
              },
              child: Text(
                'Î°úÍ∑∏ÏïÑÏõÉ',
                style: getTextStyle(fontSize: 12, color: Colors.red),
              ),
            ),
          ],
        );
      },
    );
  }
}
